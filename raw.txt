ab is ko mere dataset ky hisab sy banao 
import matplotlib.pyplot as plt
from collections import Counter

def _get_numeric_values(data, column):
    """Helper function: Extract valid numeric values from a given column."""
    values = []
    for row in data:
        try:
            val = float(row[column])
            values.append(val)
        except (ValueError, KeyError, TypeError):
            continue
    return values


def plot_histogram(data, column):
    """
    Description:
        The system shall generate a histogram for a numeric column.

    Input:
        data (list[dict]): Dataset loaded from CSV.
        column (str): Column name to visualize.

    Expected Behavior:
        A Matplotlib window shows a histogram of the selected column.
    """

    values = _get_numeric_values(data, column)

    if not values:
        print(f"[WARN] No valid numeric values found in '{column}' for histogram.")
        return

    plt.figure(figsize=(7, 4))
    plt.hist(values, bins=10, color='skyblue', edgecolor='black')
    plt.title(f"Histogram of '{column}'")
    plt.xlabel(column)
    plt.ylabel("Frequency")
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.show()
    print(f"[INFO] Histogram displayed for column '{column}'.")


def plot_bar_chart(data, column):
    """
    Description:
        The system shall generate a bar chart for a categorical column.

    Input:
        data (list[dict]): Dataset loaded from CSV.
        column (str): Column name to visualize.

    Expected Behavior:
        A Matplotlib window shows a bar chart of the selected column.
    """

    try:
        # Count frequency of each category
        values = [row[column] for row in data if row.get(column)]
        if not values:
            print(f"[WARN] No valid data found in '{column}' for bar chart.")
            return

        counter = Counter(values)
        labels, counts = list(counter.keys()), list(counter.values())

        plt.figure(figsize=(7, 4))
        plt.bar(labels, counts, color='lightgreen', edgecolor='black')
        plt.title(f"Bar Chart of '{column}'")
        plt.xlabel(column)
        plt.ylabel("Count")
        plt.xticks(rotation=30, ha='right')
        plt.grid(axis='y', linestyle='--', alpha=0.6)
        plt.tight_layout()
        plt.show()
        print(f"[INFO] Bar chart displayed for column '{column}'.")

    except KeyError:
        print(f"[ERROR] Column '{column}' not found in dataset.")
    except Exception as e:
        print(f"[ERROR] Failed to plot bar chart: {e}")
_____________________________________________
import statistics

def _get_numeric_values(data, column):
    """Helper: Extract valid numeric values from a column."""
    values = []
    for row in data:
        try:
            val = float(row[column])
            values.append(val)
        except (ValueError, KeyError, TypeError):
            continue
    return values


def mean(data, column):
    """
    Description:
        Compute the mean (average) of a numeric column.
    """
    values = _get_numeric_values(data, column)
    if not values:
        print(f"[WARN] No valid numeric values found in '{column}'.")
        return None
    result = statistics.mean(values)
    print(f"[INFO] Mean of '{column}': {result:.2f}")
    return result


def median(data, column):
    """
    Description:
        Compute the median (middle value) of a numeric column.
    """
    values = _get_numeric_values(data, column)
    if not values:
        print(f"[WARN] No valid numeric values found in '{column}'.")
        return None
    result = statistics.median(values)
    print(f"[INFO] Median of '{column}': {result:.2f}")
    return result


def mode(data, column):
    """
    Description:
        Compute the mode (most frequent value) of a numeric column.
    """
    values = _get_numeric_values(data, column)
    if not values:
        print(f"[WARN] No valid numeric values found in '{column}'.")
        return None
    try:
        result = statistics.mode(values)
        print(f"[INFO] Mode of '{column}': {result:.2f}")
        return result
    except statistics.StatisticsError:
        print(f"[WARN] No unique mode found in '{column}'.")
        return None


def variance(data, column):
    """
    Description:
        Compute the variance (spread) of a numeric column.
    """
    values = _get_numeric_values(data, column)
    if len(values) < 2:
        print(f"[WARN] Not enough data to compute variance for '{column}'.")
        return None
    result = statistics.variance(values)
    print(f"[INFO] Variance of '{column}': {result:.2f}")
    return result


def correlation(data, col1, col2):
    """
    Description:
        Compute the correlation coefficient between two numeric columns.
    """
    x_vals = _get_numeric_values
___________________________________________________________
def select_columns(data, columns):
    """
    Description:
        The system shall allow selecting specific columns from the dataset.

    Input:
        data (list[dict]): Dataset loaded from CSV.
        columns (list[str]): List of column names to keep.

    Output:
        list[dict]: Subset of data with only selected columns.
    """

    selected_data = []
    for row in data:
        selected_row = {col: row[col] for col in columns if col in row}
        selected_data.append(selected_row)

    print(f"[INFO] Selected columns: {columns}")
    print(f"[INFO] Resulting dataset size: {len(selected_data)} rows")
    return selected_data


def filter_rows(data, condition_func):
    """
    Description:
        The system shall allow filtering rows based on a user-defined condition.

    Input:
        data (list[dict]): Dataset loaded from CSV.
        condition_func (function): A function that returns True/False for each row.

    Output:
        list[dict]: Filtered data where condition_func(row) == True.
    """

    filtered_data = [row for row in data if condition_func(row)]
    print(f"[INFO] Filtered dataset size: {len(filtered_data)} rows")
    return filtered_data


def sort_by(data, column, reverse=False):
    """
    Description:
        The system shall allow sorting the dataset by a specific column.

    Input:
        data (list[dict]): Dataset loaded from CSV.
        column (str): Column name to sort by.
        reverse (bool): If True, sort in descending order. Default is False.

    Output:
        list[dict]: Sorted dataset.
    """

    try:
        sorted_data = sorted(
            data,
            key=lambda row: float(row[column]) if str(row[column]).replace('.', '', 1).isdigit() else str(row[column]),
            reverse=reverse
        )
        order = "descending" if reverse else "ascending"
        print(f"[INFO] Data sorted by '{column}' in {order} order.")
        return sorted_data
    except KeyError:
        print(f"[ERROR] Column '{column}' not found.")
        return data
    except Exception as e:
        print(f"[ERROR] Sorting failed: {e}")
        return data
______________________cleaner_________________________________
def drop_missing(data, column, value=None):
    """
    FR1: Data Cleaning
    Description:
        The system shall handle missing or invalid data entries.
        Rows with missing values are either removed or filled with a given value.

    Input:
        data (list[dict]): The dataset loaded from CSV.
        column (str): Column name to check for missing values.
        value (optional): Replacement value. If None, rows with missing values will be removed.

    Output:
        list[dict]: Cleaned dataset after handling missing data.
    """

    cleaned_data = []

    for row in data:
        cell = row.get(column, "").strip()

        # Case 1: Missing or empty cell
        if cell == "" or cell.lower() == "na" or cell.lower() == "null":
            if value is not None:
                # Replace missing value
                row[column] = value
                cleaned_data.append(row)
            # else skip (remove row)
        else:
            cleaned_data.append(row)

    if value is not None:
        print(f"[INFO] Missing values in column '{column}' were replaced with '{value}'.")
    else:
        print(f"[INFO] Rows with missing values in column '{column}' were removed.")

    print(f"[INFO] Cleaned dataset size: {len(cleaned_data)} rows")
    return cleaned_data
